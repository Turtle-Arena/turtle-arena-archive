Index: src/libmm3d/model.cc
===================================================================
--- src/libmm3d/model.cc	(revision 440)
+++ src/libmm3d/model.cc	(working copy)
@@ -264,7 +264,6 @@
      m_validJoints( false ),
      m_forceAddOrDelete( false ),
      m_animationMode( ANIMMODE_NONE ),
-     m_animationLoop( true ),
      m_currentFrame( 0 ),
      m_currentAnim( 0 ),
      m_currentTime( 0.0 )
Index: src/libmm3d/mm3dfilter.cc
===================================================================
--- src/libmm3d/mm3dfilter.cc	(revision 440)
+++ src/libmm3d/mm3dfilter.cc	(working copy)
@@ -345,6 +345,16 @@
    MF_MAT_CLAMP_T = 32
 } MisfitFlagsE;
 
+typedef enum _MisfitFrameAnimFlags_e
+{
+   MFAF_ANIM_LOOP = 0x0001
+} MisfitFrameAnimFlagsE;
+
+typedef enum _MisfitSkelAnimFlags_e
+{
+   MSAF_ANIM_LOOP = 0x0001
+} MisfitSkelAnimFlagsE;
+
 static const uint16_t _misfitOffsetTypes[MDT_MAX]  = {
 
    // Offset A types
@@ -1789,6 +1799,7 @@
          unsigned anim = model->addAnimation( Model::ANIMMODE_SKELETAL, name );
          model->setAnimFPS( Model::ANIMMODE_SKELETAL, anim, fps );
          model->setAnimFrameCount( Model::ANIMMODE_SKELETAL, anim, frameCount );
+         model->setAnimationLooping(Model::ANIMMODE_SKELETAL, anim, (flags & MSAF_ANIM_LOOP));
 
          for ( unsigned f = 0; f < frameCount; f++ )
          {
@@ -1874,6 +1885,7 @@
          unsigned anim = model->addAnimation( Model::ANIMMODE_FRAME, name );
          model->setAnimFPS( Model::ANIMMODE_FRAME, anim, fps );
          model->setAnimFrameCount( Model::ANIMMODE_FRAME, anim, frameCount );
+         model->setAnimationLooping(Model::ANIMMODE_FRAME, anim, (flags & MFAF_ANIM_LOOP));
 
          for ( unsigned f = 0; f < frameCount; f++ )
          {
@@ -2970,6 +2982,11 @@
          uint16_t  flags = 0x0000;
          float32_t fps = sa->m_fps;
 
+         if (sa->m_animationLoop)
+         {
+            flags |= MSAF_ANIM_LOOP;
+         }
+
          animSize = animSize;
          m_dst->write( animSize );
          m_dst->write( flags );
@@ -3052,6 +3069,11 @@
          uint16_t  flags = 0x0000;
          float32_t fps = fa->m_fps;
 
+         if (fa->m_animationLoop)
+         {
+            flags |= MFAF_ANIM_LOOP;
+         }
+
          m_dst->write( animSize );
          m_dst->write( flags );
          m_dst->writeBytes( (const uint8_t *) fa->m_name.c_str(), fa->m_name.length() + 1 );
Index: src/libmm3d/model_anim.cc
===================================================================
--- src/libmm3d/model_anim.cc	(revision 440)
+++ src/libmm3d/model_anim.cc	(working copy)
@@ -50,6 +50,7 @@
                anim->m_name = name;
                anim->m_fps  = 30.0;
                anim->m_spf  = (1.0 / anim->m_fps);
+               anim->m_animationLoop = true;
                anim->m_frameCount = 1;
                anim->m_validNormals = false;
 
@@ -73,6 +74,7 @@
                FrameAnim * anim = FrameAnim::get();
                anim->m_name = name;
                anim->m_fps = 10.0;
+               anim->m_animationLoop = true;
                anim->m_validNormals = false;
 
                MU_AddAnimation * undo = new MU_AddAnimation();
@@ -582,6 +584,7 @@
             {
                setAnimFrameCount( mode, num, getAnimFrameCount( mode, anim ) );
                setAnimFPS( mode, num, getAnimFPS( mode, anim ) );
+               setAnimationLooping( mode, num, getAnimationLooping( mode, anim ) );
 
                SkelAnim * sa = m_skelAnims[anim];
 
@@ -606,6 +609,7 @@
             {
                setAnimFrameCount( mode, num, getAnimFrameCount( mode, anim ) );
                setAnimFPS( mode, num, getAnimFPS( mode, anim ) );
+               setAnimationLooping( mode, num, getAnimationLooping( mode, anim ) );
 
                FrameAnim * fa = m_frameAnims[anim];
 
@@ -914,6 +918,7 @@
             if ( num >= 0 )
             {
                setAnimFrameCount( ANIMMODE_FRAME, num, frameCount );
+               setAnimationLooping( ANIMMODE_FRAME, num, getAnimationLooping( ANIMMODE_SKELETAL, anim ) );
 
                if ( frameCount > 0 )
                {
@@ -1694,7 +1699,7 @@
          double totalTime = spf * m_frameAnims[m_currentAnim]->m_frameData.size();
          while ( frameTime >= totalTime )
          {
-            if ( !m_animationLoop )
+            if ( !m_frameAnims[m_currentAnim]->m_animationLoop )
             {
                return false;
             }
@@ -1723,7 +1728,7 @@
          double totalTime = sa->m_spf * sa->m_frameCount;
          while ( frameTime > totalTime )
          {
-            if ( !m_animationLoop )
+            if ( !sa->m_animationLoop )
             {
                return false;
             }
@@ -1741,7 +1746,7 @@
       {
          Matrix transform;
          interpSkelAnimKeyframeTime( m_currentAnim, frameTime,
-               m_animationLoop, j, transform );
+               sa->m_animationLoop, j, transform );
 
          Matrix relativeFinal( m_joints[j]->m_relative );
          relativeFinal = transform * relativeFinal;
@@ -2039,14 +2044,57 @@
    return m_currentTime;
 }
 
-void Model::setAnimationLooping( bool o )
+void Model::setAnimationLooping( AnimationModeE mode, unsigned anim, bool loop )
 {
-   m_animationLoop = o;
+   switch ( mode )
+   {
+      case ANIMMODE_SKELETAL:
+         if ( anim < m_skelAnims.size() )
+         {
+            MU_SetAnimLoop * undo = new MU_SetAnimLoop();
+            undo->setAnimLoop( mode, anim, loop, m_skelAnims[anim]->m_animationLoop );
+            sendUndo( undo );
+
+            m_skelAnims[anim]->m_animationLoop = loop;
+         }
+         break;
+      case ANIMMODE_FRAME:
+         if ( anim < m_frameAnims.size() )
+         {
+            MU_SetAnimLoop * undo = new MU_SetAnimLoop();
+            undo->setAnimLoop( mode, anim, loop, m_frameAnims[anim]->m_animationLoop );
+            sendUndo( undo );
+
+            m_frameAnims[anim]->m_animationLoop = loop;
+         }
+         break;
+      default:
+         break;
+   }
 }
 
-bool Model::isAnimationLooping() const
+bool Model::getAnimationLooping( AnimationModeE mode, unsigned anim ) const
 {
-   return m_animationLoop;
+   switch ( mode )
+   {
+      case ANIMMODE_SKELETAL:
+         if ( anim < m_skelAnims.size() )
+         {
+            return m_skelAnims[anim]->m_animationLoop;
+         }
+         break;
+      case ANIMMODE_FRAME:
+         if ( anim < m_frameAnims.size() )
+         {
+            return m_frameAnims[anim]->m_animationLoop;
+         }
+         break;
+      default:
+         break;
+   }
+
+   // shouldn't happen
+   return true;
 }
 
 void Model::setNoAnimation()
Index: src/libmm3d/modelundo.cc
===================================================================
--- src/libmm3d/modelundo.cc	(revision 440)
+++ src/libmm3d/modelundo.cc	(working copy)
@@ -2441,6 +2441,60 @@
    m_oldFPS     = oldFps;
 }
 
+MU_SetAnimLoop::MU_SetAnimLoop()
+{
+}
+
+MU_SetAnimLoop::~MU_SetAnimLoop()
+{
+}
+
+void MU_SetAnimLoop::undo( Model * model )
+{
+   model->setAnimationLooping( m_mode, m_animNum, m_oldLoop );
+   if ( model->getAnimationMode() != Model::ANIMMODE_NONE && (model->getAnimationMode() != m_mode || model->getCurrentAnimation() != m_animNum) ) 
+   {
+      model->setCurrentAnimation( m_mode, m_animNum );
+   }
+}
+
+void MU_SetAnimLoop::redo( Model * model )
+{
+   model->setAnimationLooping( m_mode, m_animNum, m_newLoop );
+   if ( model->getAnimationMode() != Model::ANIMMODE_NONE && (model->getAnimationMode() != m_mode || model->getCurrentAnimation() != m_animNum) ) 
+   {
+      model->setCurrentAnimation( m_mode, m_animNum );
+   }
+}
+
+bool MU_SetAnimLoop::combine( Undo * u )
+{
+   MU_SetAnimLoop * undo = dynamic_cast< MU_SetAnimLoop * >( u );
+
+   if ( undo && undo->m_mode == m_mode && undo->m_animNum == m_animNum )
+   {
+      m_newLoop = undo->m_newLoop;
+      return true;
+   }
+   else
+   {
+      return false;
+   }
+}
+
+unsigned MU_SetAnimLoop::size()
+{
+   return sizeof(MU_SetAnimLoop);
+}
+
+void MU_SetAnimLoop::setAnimLoop( Model::AnimationModeE mode, unsigned animNum, bool newLoop, bool oldLoop )
+{
+   m_mode       = mode;
+   m_animNum    = animNum;
+   m_newLoop    = newLoop;
+   m_oldLoop    = oldLoop;
+}
+
 MU_SetAnimKeyframe::MU_SetAnimKeyframe()
 {
 }
Index: src/libmm3d/model.h
===================================================================
--- src/libmm3d/model.h	(revision 440)
+++ src/libmm3d/model.h	(working copy)
@@ -651,6 +651,7 @@
             JointKeyframeList m_jointKeyframes;
             double   m_fps;  // Frames per second
             double   m_spf;  // Seconds per frame (for convenience, 1.0 / m_fps)
+            bool     m_animationLoop;
             unsigned m_frameCount;    // Number of frames in the animation
             bool     m_validNormals;  // Whether or not the normals have been calculated for the current animation frame
 
@@ -766,6 +767,7 @@
             FrameAnimDataList m_frameData;
 
             double m_fps;  // Frames per second
+            bool   m_animationLoop;
             bool   m_validNormals;  // Whether or not the normals have been calculated
 
             bool propEqual( const FrameAnim & rhs, int propBits = PropAll, double tolerance = 0.00001 ) const;
@@ -1109,8 +1111,8 @@
       unsigned getCurrentAnimationFrame() const;
       double   getCurrentAnimationTime() const;
 
-      void setAnimationLooping( bool o );
-      bool isAnimationLooping() const;
+      void setAnimationLooping( AnimationModeE mode, unsigned anim, bool loop );
+      bool getAnimationLooping( AnimationModeE mode, unsigned anim ) const;
 
       // Stop animation mode, go back to standard pose editing.
       void setNoAnimation();
@@ -1868,7 +1870,6 @@
       int    m_numFrames;  // Deprecated
 
       AnimationModeE m_animationMode;
-      bool     m_animationLoop;
       unsigned m_currentFrame;
       unsigned m_currentAnim;
       double   m_currentTime;
Index: src/libmm3d/modelundo.h
===================================================================
--- src/libmm3d/modelundo.h	(revision 440)
+++ src/libmm3d/modelundo.h	(working copy)
@@ -1069,6 +1069,29 @@
       double   m_oldFPS;
 };
 
+class MU_SetAnimLoop : public ModelUndo
+{
+   public:
+
+      MU_SetAnimLoop();
+      virtual ~MU_SetAnimLoop();
+
+      void undo( Model * );
+      void redo( Model * );
+      bool combine( Undo * );
+
+      unsigned size();
+
+      void setAnimLoop( Model::AnimationModeE mode, unsigned animNum, bool newLoop, bool oldLoop );
+
+   private:
+
+      Model::AnimationModeE m_mode;
+      unsigned m_animNum;
+      bool   m_newLoop;
+      bool   m_oldLoop;
+};
+
 class MU_SetAnimKeyframe : public ModelUndo
 {
    public:
Index: src/implui/animexportwin.cc
===================================================================
--- src/implui/animexportwin.cc	(revision 440)
+++ src/implui/animexportwin.cc	(working copy)
@@ -268,7 +268,6 @@
 
       bool enable = m_model->setUndoEnabled( false );
 
-      m_model->setAnimationLooping( true );
       m_model->setCurrentAnimation( mode, a );
 
       int frameNum = 0;
Index: src/implui/animwidget.h
===================================================================
--- src/implui/animwidget.h	(revision 440)
+++ src/implui/animwidget.h	(working copy)
@@ -84,7 +84,6 @@
       void insertAnimationNames();
 
       Model  * m_model;
-      bool     m_doLoop;
       bool     m_playing;
       double   m_timeInterval;
       double   m_currentTime;
Index: src/implui/animwidget.cc
===================================================================
--- src/implui/animwidget.cc	(revision 440)
+++ src/implui/animwidget.cc	(working copy)
@@ -86,7 +86,6 @@
 AnimWidget::AnimWidget( Model * model, bool isUndo, QWidget * parent )
    : QWidget( parent ),
      m_model( model ),
-     m_doLoop( true ),
      m_playing( false ),
      m_undoing( isUndo ),
      m_ignoreChange( false )
@@ -116,8 +115,7 @@
 
    m_countSlider->setTickPosition( QSlider::TicksBelow );
 
-   m_doLoop = m_model->isAnimationLooping();
-   m_loop->setChecked( m_doLoop );
+   m_loop->setChecked( m_model->getAnimationLooping(m_model->getAnimationMode(), m_model->getCurrentAnimation()) );
 
    m_skelAnimCount = m_model->getAnimCount( Model::ANIMMODE_SKELETAL );
    m_frameAnimCount = m_model->getAnimCount( Model::ANIMMODE_FRAME );
@@ -520,10 +518,15 @@
 
 void AnimWidget::loopToggled( bool o )
 {
-   m_doLoop = o;
-   m_model->setAnimationLooping( o );
-   m_model->setCurrentAnimationFrame( m_countSlider->value() - 1 );
-   DecalManager::getInstance()->modelUpdated( m_model );
+   if ( !m_ignoreChange && m_animCount > 0 )
+   {
+      log_debug( "toggling loop\n" );
+      m_model->setAnimationLooping( m_mode, indexToAnim( m_animName->currentIndex() ), o );
+      m_model->operationComplete( tr( "Set Looping", "Looping, operation complete" ).toUtf8() );
+
+      m_model->setCurrentAnimationFrame( m_countSlider->value() - 1 );
+      DecalManager::getInstance()->modelUpdated( m_model );
+   }
 }
 
 void AnimWidget::doPlay()
@@ -680,6 +683,7 @@
          m_ignoreChange = true;  // Qt alerts us even if we're responsible
          m_frameCount->setValue( count );
          m_fps->setText( QString::number(m_model->getAnimFPS( mode, index ) ) );
+         m_loop->setChecked( m_model->getAnimationLooping( mode, index ) );
          m_ignoreChange = false;
 
          m_countSlider->setMinimum( 1 );
@@ -703,6 +707,7 @@
          m_loop->setEnabled( false );
 
          m_fps->setText( QString("0") );
+         m_loop->setChecked( false );
          m_ignoreChange = true;  // Qt alerts us even if we're responsible
          m_frameCount->setValue( 0 );
          m_ignoreChange = false;
@@ -745,6 +750,7 @@
          m_loop->setEnabled( false );
 
          m_fps->setText( QString("0") );
+         m_loop->setChecked( false );
          m_ignoreChange = true;  // Qt alerts us even if we're responsible
          m_frameCount->setValue( 0 );
          m_ignoreChange = false;
